from concurrent.futures import Executor
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import json
from datetime import datetime, timedelta
import requests
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from io import BytesIO
from aiogram.types import InputFile
from aiogram.types.input_file import BufferedInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging
import os
from openpyxl import Workbook

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7797023420:AAGxA9sa-C2Ml-1KkF3fFk7Dct7G5LwOapA"
OPENROUTER_API_KEY = "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"
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
KEYWORDS_FILE = "keywords.json"
DB_FILE = "database.db"
user_state = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class UserRegistration(StatesGroup):
    waiting_for_name = State()
    waiting_for_group = State()

class ChatStates(StatesGroup):
    waiting_for_message = State()
    analyzing_message = State()
    finished = State()


def get_db_connection():
    return sqlite3.connect("database.db")

    


def setup_database():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.executescript("""
        CREATE TABLE IF NOT EXISTS roles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id INTEGER UNIQUE NOT NULL,  -- Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name TEXT NOT NULL,
    group_name TEXT,
    role_id INTEGER NOT NULL,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS structure (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,         -- –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)
    position TEXT NOT NULL,     -- –î–æ–ª–∂–Ω–æ—Å—Ç—å (–¥–µ–∫–∞–Ω, –∑–∞–≤–µ–¥—É—é—â–∏–π –∏ —Ç. –¥.)
    contact TEXT NOT NULL,      -- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
    email TEXT UNIQUE NOT NULL, -- Email
    office TEXT NOT NULL,       -- –ê–¥—Ä–µ—Å/–∫–∞–±–∏–Ω–µ—Ç
    schedule TEXT,              -- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
    photo_url TEXT,             -- –§–æ—Ç–æ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    user_id INTEGER,            -- –°–≤—è–∑—å —Å users (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ)
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS organizations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL,   -- –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    info TEXT NOT NULL,          -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    contact TEXT NOT NULL,       -- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    address TEXT NOT NULL,       -- –ê–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    photo_url TEXT               -- –§–æ—Ç–æ (–ª–æ–≥–æ—Ç–∏–ø/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
);

CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    event_name TEXT NOT NULL,             -- –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    description TEXT NOT NULL,       -- –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    event_date TIMESTAMP NOT NULL,   -- –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    participant_limit INTEGER NOT NULL CHECK (participant_limit > 0),  -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    tg_id INTEGER NOT NULL,          -- Telegram ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    FOREIGN KEY (tg_id) REFERENCES users(tg_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS chat_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id INTEGER NOT NULL,      -- Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ user_id
    message TEXT NOT NULL,
    response TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tg_id) REFERENCES users(tg_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS admin_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id INTEGER NOT NULL,      -- Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–º–µ—Å—Ç–æ admin_id
    action TEXT NOT NULL,
    details TEXT,
    log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tg_id) REFERENCES users(tg_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS event_participants (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    event_id INTEGER NOT NULL,   -- ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    tg_id INTEGER NOT NULL,      -- Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
    name TEXT NOT NULL,          -- –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    group_name TEXT NOT NULL,    -- –ì—Ä—É–ø–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (tg_id) REFERENCES users(tg_id) ON DELETE CASCADE
);


 CREATE TABLE IF NOT EXISTS faq (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question TEXT UNIQUE NOT NULL,
    answer TEXT NOT NULL
        );
                         

    """)


    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ "student", –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute("INSERT OR IGNORE INTO roles (name) VALUES ('student')")
    conn.commit()
    
    conn.close()


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–£—á—ë–±–∞"),
            KeyboardButton(text="–°—Ç—Ä—É–∫—Ç—É—Ä–∞")
        ]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é "–£—á—ë–±–∞"
study_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"),
            KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        ],
        [
            KeyboardButton(text="–ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç"),
            KeyboardButton(text="–ü—Å–∏—Ö–æ–ª–æ–≥")
        ],
        [
            KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"),
        ]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é "–°—Ç—Ä—É–∫—Ç—É—Ä–∞"
structure_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")
        ]
    ],
    resize_keyboard=True
)

psychologist_menu=ReplyKeyboardMarkup(
    keyboard=[
        [
               KeyboardButton(text="–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º")
        ]
    ],
    resize_keyboard=True
)



#start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT name, group_name FROM users WHERE tg_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        name, group = user
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}!\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {group}.", reply_markup=main_menu)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û.")
        await state.set_state(UserRegistration.waiting_for_name)

#—Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(UserRegistration.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.")
    await state.set_state(UserRegistration.waiting_for_group)


@dp.message(UserRegistration.waiting_for_group)
async def process_group(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data["name"]
    group = message.text

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM roles WHERE name = 'student'")
    role_id = cursor.fetchone()[0]

    cursor.execute(
        "INSERT OR REPLACE INTO users (tg_id, name, group_name, role_id) VALUES (?, ?, ?, ?)",
        (message.from_user.id, name, group, role_id)
    )
    conn.commit()
    conn.close()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}!\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {group}.", reply_markup=main_menu)
    await state.clear()


@dp.message(F.text == "–£—á—ë–±–∞")
async def show_study_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=study_menu)

#–≠–¢–û –°–¢–†–£–ö–¢–£–ê–†–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–†–ê–ê–†–ê–†–ê–†–†–ê
def get_db_connection():
    return sqlite3.connect(DB_FILE)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
def get_structure_by_role(role: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ photo_blob, –º–æ–∂–Ω–æ –µ–≥–æ —É–±—Ä–∞—Ç—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    cursor.execute(
        "SELECT name, contact, email, office, schedule, photo_url,photo_blob FROM structure WHERE position = ?",
        (role,)
    )
    data = cursor.fetchall()
    conn.close()
    return data

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
user_structure_positions = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def send_structure_card(chat_id, role: str, position: int):
    persons = get_structure_by_role(role)
    if not persons:
        await bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    person = persons[position]
    name, contact, email, office, schedule, photo_url, photo_blob = person
    response = (
        f"üë§ *{name}*\n"
        f"üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}\n"
        f"‚úâ Email: {email}\n"
        f"üè¢ –ö–∞–±–∏–Ω–µ—Ç: {office}\n"
        f"üïí –ì—Ä–∞—Ñ–∏–∫: {schedule}"
    )

    keyboard_builder = InlineKeyboardBuilder()
    if position > 0:
        keyboard_builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"prev_struct_{role}_{position}")
    if position < len(persons) - 1:
        keyboard_builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"next_struct_{role}_{position}")
    keyboard_builder.button(text="üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π", callback_data="show_structure")
    keyboard_builder.adjust(2)

    if photo_blob:
        # –ï—Å–ª–∏ photo_blob —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –±–∞–π—Ç–∞–º–∏, –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
        photo_file = BufferedInputFile(photo_blob, filename="dekan.jpg")
        await bot.send_photo(chat_id, photo_file, caption=response, parse_mode="Markdown", reply_markup=keyboard_builder.as_markup())
    elif photo_url:
        await bot.send_photo(chat_id, photo_url, caption=response, parse_mode="Markdown", reply_markup=keyboard_builder.as_markup())
    else:
        await bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=keyboard_builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–°—Ç—Ä—É–∫—Ç—É—Ä–∞"
@dp.message(F.text == "–°—Ç—Ä—É–∫—Ç—É—Ä–∞")
async def show_structure_immediately(message: types.Message):
    await send_structure_list(message.chat.id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
async def send_structure_list(chat_id):
    keyboard_builder = InlineKeyboardBuilder()
    roles = ["–†–µ–∫—Ç–æ—Ä", "–î–µ–∫–∞–Ω", "–ó–∞–º. –¥–µ–∫–∞–Ω–∞", "–ó–∞–≤. –∫–∞—Ñ–µ–¥—Ä–æ–π"]
    for role in roles:
        keyboard_builder.button(text=role, callback_data=f"struct_{role}")
    keyboard_builder.adjust(1)
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=keyboard_builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data.startswith("struct_"))
async def select_structure_role(callback_query: types.CallbackQuery):
    role = callback_query.data.split("_")[1]
    user_structure_positions[callback_query.message.chat.id] = 0
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await send_structure_card(callback_query.message.chat.id, role, 0)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
@dp.callback_query(lambda c: c.data.startswith(("prev_struct_", "next_struct_")))
async def pagination_structure(callback_query: types.CallbackQuery):
    # –§–æ—Ä–º–∞—Ç callback_data: "prev_struct_{role}_{position}" –∏–ª–∏ "next_struct_{role}_{position}"
    data_parts = callback_query.data.split("_")
    action = data_parts[0]
    role = data_parts[2]
    position = int(data_parts[3])
    persons = get_structure_by_role(role)
    if action == "prev":
        position -= 1
    elif action == "next":
        position += 1

    user_structure_positions[callback_query.message.chat.id] = position
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await send_structure_card(callback_query.message.chat.id, role, position)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"
@dp.callback_query(lambda c: c.data == "show_structure")
async def show_structure_callback(callback_query: types.CallbackQuery):
    try:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        
    await send_structure_list(callback_query.message.chat.id)


@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

#organization
def get_organizations():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, info, contact, address, photo_url FROM organizations")
    data = cursor.fetchall()
    conn.close()
    return data

organizations = get_organizations()
user_positions = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
async def send_card(chat_id, position):
    org = organizations[position]
    caption = f"üè¢ <b>{org[1]}</b>\n\n{org[2]}\n\nüìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {org[3]}\nüìç –ê–¥—Ä–µ—Å: {org[4]}"
    
    keyboard_builder = InlineKeyboardBuilder()

    if position > 0:
        keyboard_builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"prev_{position}")
    if position < len(organizations) - 1:
        keyboard_builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"next_{position}")
    
    keyboard_builder.button(text="üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data="show_orgs")
    

    keyboard_builder.adjust(2)  
    keyboard = keyboard_builder.as_markup()

    if org[5]:  
        await bot.send_photo(chat_id, org[5], caption=caption, parse_mode="HTML", reply_markup=keyboard)
    else:
        await bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
async def send_organizations_list(chat_id):
    keyboard_builder = InlineKeyboardBuilder()
    
    for i, org in enumerate(organizations):
        keyboard_builder.button(text=org[1], callback_data=f"org_{i}")
     
    keyboard_builder.adjust(1)  
    await bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:", reply_markup=keyboard_builder.as_markup())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(chat_id):
    await bot.send_message(chat_id, "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=study_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
@dp.message(lambda message: message.text == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
async def show_organizations_by_button(message: types.Message):
    await send_organizations_list(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith(("prev_", "next_")))
async def pagination(callback_query: types.CallbackQuery):
    action, position = callback_query.data.split("_")
    position = int(position)

    if action == "prev":
        position -= 1
    elif action == "next":
        position += 1

    user_positions[callback_query.message.chat.id] = position
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await send_card(callback_query.message.chat.id, position)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
@dp.callback_query(lambda c: c.data == "show_orgs")
async def show_organizations(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await send_organizations_list(callback_query.message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith("org_"))
async def select_organization(callback_query: types.CallbackQuery):
    position = int(callback_query.data.split("_")[1])
    user_positions[callback_query.message.chat.id] = position
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await send_card(callback_query.message.chat.id, position)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await send_main_menu(callback_query.message.chat.id)

#–ø—Å–∏—Ö–æ–ª–æ–≥ –ò–ò
@dp.message(lambda message: message.text.lower() == "–ø—Å–∏—Ö–æ–ª–æ–≥")
async def psychologist_cmd(message: Message, state: FSMContext):
    user_id = message.from_user.id
    last_message = get_last_message(user_id)

    if last_message:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ —Ç—ã –≥–æ–≤–æ—Ä–∏–ª: '{last_message}'. –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞? –†–µ—à–∏–ª–∞—Å—å –ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è?", reply_markup=psychologist_menu)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥ üß†. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –æ–¥–Ω–∏–º —Ü–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã —è –º–æ–≥ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –¥–∞—Ç—å —Ç–µ–±–µ —Ä–µ—à–µ–Ω–∏–µ.", reply_markup=psychologist_menu)
    
    await state.set_state(ChatStates.waiting_for_message)


@dp.message(F.text.in_(["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ü–ª–∞—Ç–∞", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Å—ã", "–ü—Å–∏—Ö–æ–ª–æ–≥"]))
async def show_organization_info(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–Ω–µ –∏—â–µ–º –≤—Å–µ –ø–æ–¥—Ä—è–¥)
    cursor.execute("SELECT name, info, contact, address, photo_url FROM organizations WHERE name = ?", (message.text,))
    org = cursor.fetchone()
    conn.close()

    if org:
        name, info, contact, address, photo_url = org
        response = f"üè¢ *{name}*\nüìú {info}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}\nüìç –ê–¥—Ä–µ—Å: {address}"
        
        if photo_url:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await message.answer_photo(photo_url, caption=response, parse_mode="Markdown")
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(response, parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# üìå –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
def load_json(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

alert_words = load_json(KEYWORDS_FILE)

def get_last_message(tg_id):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT message, timestamp FROM chat_history WHERE tg_id = ? ORDER BY timestamp DESC LIMIT 1", (tg_id,))
    last_message = cursor.fetchone()
    conn.close()

    if last_message:
        message_text, timestamp = last_message
        timestamp = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥, –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å –µ–≥–æ
        if datetime.now() - timestamp > timedelta(days=7):
            return None

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ, –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å –µ–≥–æ
        if len(message_text) < 10 or message_text.lower() in {"–æ–∫", "–¥–∞", "–Ω–µ—Ç", "–ø–æ–Ω—è—Ç–Ω–æ"}:
            return None

        return message_text
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ò–ò"
@dp.message(F.text == "–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º")
async def go_back(message: types.Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


@dp.message(ChatStates.waiting_for_message)
async def analyze_and_respond(message: Message, state: FSMContext):
    text = message.text.lower()
    user_id = message.from_user.id

    found_alert = next((alert_text for word, alert_text in alert_words.items() if word in text), None)
    if found_alert:
        await alert_psychologist(message, found_alert)

    await state.set_state(ChatStates.analyzing_message)


# üß† –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
    payload = {
    "model": "openai/gpt-3.5-turbo",
    "messages": [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —á—É—Ç–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è. "
                "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, —É–≤–∞–∂–∞–π —ç—Ç–æ –∏ –Ω–µ –Ω–∞—Å—Ç–∞–∏–≤–∞–π. "
                "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ, —Ç–µ–ø–ª–æ –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ."
            ),
        },
        {
            "role": "user",
            "content": "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?'"
        },
        {
            "role": "assistant",
            "content": "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        },
        {
            "role": "user",
            "content": f"–ü–∞—Ü–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç: {text}"
        },
        {
            "role": "system",
            "content": (
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞: "
                "- –ï—Å–ª–∏ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ –∏ —É–∫–ª–æ–Ω—á–∏–≤–æ ('–Ω–µ—Ç', '–Ω–µ –∑–Ω–∞—é', '–≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ'), –Ω–µ –¥–∞–≤–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. "
                "- –ï—Å–ª–∏ –æ–Ω —Ö–æ—á–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ, –Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞–π –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. "
                "- –ë—É–¥—å —Ç–∞–∫—Ç–∏—á–Ω—ã–º, –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑."
            ),
        }
    ]
}



    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)
        response.raise_for_status()
        ai_reply = response.json()["choices"][0]["message"]["content"]
    except requests.RequestException:
        ai_reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_message_to_db(user_id, text, ai_reply)

    await message.answer(f"üß† –ü—Å–∏—Ö–æ–ª–æ–≥: {ai_reply}")
    await state.set_state(ChatStates.waiting_for_message)

def save_message_to_db(tg_id, message, response):
    if len(message.split()) > 15:  
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT timestamp FROM chat_history 
            WHERE tg_id = ? AND LENGTH(message) - LENGTH(REPLACE(message, ' ', '')) + 1 > 15 
            ORDER BY timestamp DESC LIMIT 1
        """, (tg_id,))
        last_message = cursor.fetchone()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        if last_message:
            last_time = datetime.strptime(last_message[0], "%Y-%m-%d %H:%M:%S")
            if datetime.now() - last_time < timedelta(hours=1):
                conn.close()
                return  

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        cursor.execute("""
            INSERT INTO chat_history (tg_id, message, response)
            VALUES (?, ?, ?)
        """, (tg_id, message, response))
        conn.commit()
        conn.close()
# üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
async def alert_psychologist(message: types.Message, alert_text: str):
    psychologist_chat_id = "946368702"  # ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ users
    cursor.execute("SELECT name, group_name FROM users WHERE tg_id = ?", (message.from_user.id,))
    student = cursor.fetchone()
    conn.close()

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_name = student[0] if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    group_name = student[1] if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    student_info = (
        f"üö® {alert_text}\n\nüë§ –§–ò–û: {full_name}\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {group_name}\nüì© –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
    )

    await bot.send_message(psychologist_chat_id, student_info)



# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_faq_data():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT question, answer FROM faq")
    data = cursor.fetchall()
    conn.close()
    return {question: answer for question, answer in data}

ITEMS_PER_PAGE = 3  

class FAQStates(StatesGroup):
    selecting_question = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
def get_faq_keyboard(page=0):
    faq_data = get_faq_data()
    faq_list = list(faq_data.keys())  
    builder = InlineKeyboardBuilder()
    
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE

    for idx, question in enumerate(faq_list[start:end], start):
        builder.button(text=question[:30], callback_data=f"faq:{idx}")  
    
    if start > 0:
        builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}")
    if end < len(faq_list):
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"page:{page+1}")

    builder.adjust(1)
    return builder.as_markup()

faq_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="–û–± –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ")],
        [KeyboardButton(text="–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å")],
        [KeyboardButton(text="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")],
        [KeyboardButton(text="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

 

@dp.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_faq_button(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=faq_button)


@dp.message(F.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def show_faq_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=get_faq_keyboard())

@dp.message(F.text == "–û–± –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ")
async def show_university_info(message: types.Message):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ university_info —Å –ø–æ–ª—è–º–∏ title –∏ description
    cursor.execute("SELECT description FROM university_info WHERE title = '–û–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ'")
    data = cursor.fetchone()
    conn.close()
    if data:
        await message.answer(data[0])
    else:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å"
@dp.message(F.text == "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å")
async def show_student_life_info(message: types.Message):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ student_life —Å –ø–æ–ª—è–º–∏ title –∏ description
    cursor.execute("SELECT description FROM student_life WHERE title = '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å'")
    data = cursor.fetchone()
    conn.close()
    
    if data:
        await message.answer(data[0])
    else:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.message(F.text == "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")
async def show_social_networks(message: types.Message):
    builder = InlineKeyboardBuilder()
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT platform FROM social_links")
    data = cursor.fetchall()
    conn.close()
    
    if data:
        for row in data:
            platform = row[0]
            builder.button(text=platform, callback_data=f"social:{platform}")
        builder.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:", reply_markup=builder.as_markup())
    else:
        await message.answer("–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏
@dp.callback_query(lambda c: c.data.startswith("social:"))
async def social_callback_handler(callback: types.CallbackQuery):
    platform = callback.data.split(":")[1]
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏ –∏–∑ –ë–î
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT url FROM social_links WHERE platform = ?", (platform,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        url = result[0]
        builder = InlineKeyboardBuilder()
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å" ‚Äì URL-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        builder.button(text="–û—Ç–∫—Ä—ã—Ç—å", url=url)
        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å" ‚Äì –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ—Ü—Å–µ—Ç–µ–π
        builder.button(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_social")
        builder.adjust(2)
        await callback.message.edit_text(f"–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å: {platform}", reply_markup=builder.as_markup())
    else:
        await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
@dp.callback_query(F.data == "close_social")
async def close_social_handler(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT platform FROM social_links")
    data = cursor.fetchall()
    conn.close()
    
    if data:
        for row in data:
            platform = row[0]
            builder.button(text=platform, callback_data=f"social:{platform}")
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:", reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text("–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    await callback.answer("–°–æ—Ü.—Å–µ—Ç–∏")

@dp.message(F.text == "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
async def show_library(message: types.Message):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ title
    cursor.execute("SELECT url, description FROM library WHERE title = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞'")
    data = cursor.fetchone()
    conn.close()
    
    if data:
        url, description = data
        builder = InlineKeyboardBuilder()
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ
        builder.button(text="–û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", url=url)
        builder.adjust(1)
        await message.answer(description, reply_markup=builder.as_markup())
    else:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.callback_query(F.data.startswith("page:"))
async def change_page(callback: types.CallbackQuery):
    page = int(callback.data.split(":")[1])
    await callback.message.edit_reply_markup(reply_markup=get_faq_keyboard(page))

@dp.callback_query(F.data.startswith("faq:"))
async def show_answer(callback: types.CallbackQuery):
    idx = int(callback.data.split(":")[1])  
    faq_data = get_faq_data()
    faq_list = list(faq_data.keys()) 
    question = faq_list[idx]  
    answer = faq_data.get(question, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await callback.message.answer(f"*{question}*\n{answer}", parse_mode="Markdown")

class RouteState(StatesGroup):
    start_building = State()
    end_building = State()

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–ø—É—Å–æ–≤
BUILDINGS = {
    "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å": [50.39926893087973, 80.21283678151234],
    "3 –∫–æ—Ä–ø—É—Å": [50.411225983226444, 80.23195149826937],
    "8 –∫–æ—Ä–ø—É—Å": [50.44473520679828, 80.2311385313739],
    "9 –∫–æ—Ä–ø—É—Å": [50.40101937972673, 80.21268325391492],
    "–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ1": [50.400693893589136, 80.21582695214042],
    "–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ2": [50.445618, 80.230461],
    "–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ3": [50.423074, 80.235581],
    "–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å ‚Ññ1": [50.40238996620285, 80.21023486930758]
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ—Ä–ø—É—Å–∞–º–∏
def get_building_keyboard():
    building_buttons = [[KeyboardButton(text=corp)] for corp in BUILDINGS.keys()]
    building_buttons.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    return ReplyKeyboardMarkup(
        keyboard=building_buttons,
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

# –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(F.text == "–ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç")
async def ask_start_location(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ—Ä–ø—É—Å:", reply_markup=get_building_keyboard())
    await state.set_state(RouteState.start_building)

# –í—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
@dp.message(RouteState.start_building)
async def ask_end_location(message: types.Message, state: FSMContext):
    if message.text not in BUILDINGS:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return

    await state.update_data(start_building=message.text)
    await message.answer(f"–ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ—Ä–ø—É—Å: {message.text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—ã–π –∫–æ—Ä–ø—É—Å:", reply_markup=get_building_keyboard())
    await state.set_state(RouteState.end_building)

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(RouteState.end_building)
async def get_route(message: types.Message, state: FSMContext):
    if message.text not in BUILDINGS:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return

    data = await state.get_data()
    start_building = data.get("start_building")
    end_building = message.text

    if start_building == end_building:
        await message.answer("–ù–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∫–æ—Ä–ø—É—Å–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω–µ—á–Ω—ã–π –∫–æ—Ä–ø—É—Å.")
        return

    await message.answer(f"–°—Ç—Ä–æ—é –º–∞—Ä—à—Ä—É—Ç –∏–∑ {start_building} –≤ {end_building}...")

    start_coords = BUILDINGS[start_building]
    end_coords = BUILDINGS[end_building]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
    yandex_url = f"https://yandex.ru/maps/?rtext={start_coords[0]},{start_coords[1]}~{end_coords[0]},{end_coords[1]}&rtt=pedestrian"

    await message.answer(
        f"üö∂ –ü–µ—à–∫–æ–º: –º–∞—Ä—à—Ä—É—Ç –∏–∑ <b>{start_building}</b> –≤ <b>{end_building}</b>\n"
        f"üîó <a href='{yandex_url}'>–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

    await state.clear()  



# ADMINKA


ADMIN_ID = [5819205069, 946368702]

event_steps = {}
scheduler = AsyncIOScheduler()


# FSM –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–µ–π
class RoleAssignment(StatesGroup):
    waiting_for_tg_id = State()
    waiting_for_role = State()

# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AddUser(StatesGroup):
    waiting_for_tg_id = State()
    waiting_for_name = State()
    waiting_for_role = State()

# FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RemoveUser(StatesGroup):
    waiting_for_tg_id = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π row_factory
def get_db_connection():
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = None
    return conn

def ensure_roles_exist():
    conn = get_db_connection()
    cursor = conn.cursor()
    roles = ['–¥–µ–∫–∞–Ω', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–∑–∞–º –¥–µ–∫–∞–Ω', '–∑–∞–≤ –∫–∞—Ñ', '–ø—Å–∏—Ö–æ–ª–æ–≥']
    for role in roles:
        cursor.execute("INSERT OR IGNORE INTO roles (name) VALUES (?)", (role,))
    conn.commit()
    conn.close()

ensure_roles_exist()

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
admin_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data="manage_roles")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="remove_user")]
    ]
)


# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –¥–µ–∫–∞–Ω–∞
def get_dekan_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_event")
    builder.button(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_users")
    builder.button(text="üìã –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="export_events")
    builder.adjust(1)  # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
psychologist_panel = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã", callback_data="problem_students")]
    ]
)

async def problem_students(message: types.Message, alert_text: str):
    """
    –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ —Ç—Ä–µ–≤–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º —Ç—Ä–µ–≤–æ–≥–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name, group_name FROM users WHERE tg_id = ?", (message.from_user.id,))
    student = cursor.fetchone()
    conn.close()

    full_name = student["name"] if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    group_name = student["group_name"] if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    student_info = (
        f"üö® {alert_text}\n\n"
        f"üë§ –§–ò–û: {full_name}\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
    )

    # –ü–æ–ª—É—á–∞–µ–º tg_id –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT tg_id 
        FROM users 
        WHERE role_id = (SELECT id FROM roles WHERE name = '–ø—Å–∏—Ö–æ–ª–æ–≥')
        LIMIT 1
    """)
    result = cursor.fetchone()
    conn.close()

    if result:
        psychologist_chat_id = result["tg_id"]
        await bot.send_message(psychologist_chat_id, student_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ chat_history –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO chat_history (tg_id, message, response) VALUES (?, ?, ?)",
            (psychologist_chat_id, "–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å (1)", "")
        )
        conn.commit()
        conn.close()
    else:
        logging.error("–ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.callback_query(lambda call: call.data == "problem_students")
async def handle_all_problematic_students(call: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã' –≤—ã–∑–≤–∞–Ω. Callback data: %s", call.data)
    
    if not call.message:
        logging.error("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ callback!")
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º tg_id –ø—Å–∏—Ö–æ–ª–æ–≥–∞
    cursor.execute("""
        SELECT tg_id 
        FROM users 
        WHERE role_id = (SELECT id FROM roles WHERE name = '–ø—Å–∏—Ö–æ–ª–æ–≥')
        LIMIT 1
    """)
    result = cursor.fetchone()
    if not result:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        conn.close()
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥.", show_alert=True)
        return
    
    psychologist_chat_id = result[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –∫–ª—é—á–∞
    logging.info("–ù–∞–π–¥–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥ —Å tg_id: %s", psychologist_chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ chat_history
    cursor.execute("""
        SELECT tg_id, message, response, timestamp
        FROM chat_history
        ORDER BY timestamp DESC
    """)
    entries = cursor.fetchall()
    conn.close()
    
    if not entries:
        logging.info("–ó–∞–ø–∏—Å–µ–π –≤ chat_history –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await call.message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    else:
        messages = []
        for entry in entries:
            student_tg_id = entry[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
            student_message = entry[1]
            ai_response = entry[2]
            timestamp = entry[3]
            
            # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∏ –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT name, group_name FROM users WHERE tg_id = ?", (student_tg_id,))
            student_data = cursor.fetchone()
            conn.close()
            
            if student_data:
                full_name = student_data[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
                group_name = student_data[1]
            else:
                full_name, group_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            messages.append(
                f"üë§ {full_name} ({group_name})\n"
                f"üïí {timestamp}\n"
                f"üí¨ {student_message}\n"
                f"ü§ñ {ai_response}\n"
                "-------------------------"
            )
        final_message = "–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã:\n\n" + "\n".join(messages)
        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥—É. –ù–∞—á–∞–ª–æ: %s", final_message[:100])
        await bot.send_message(psychologist_chat_id, final_message)
    
    await call.answer("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)

@dp.message(Command("admin"))
async def start(message: types.Message):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
    cursor = conn.cursor()  # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ row_factory

    cursor.execute("""
        SELECT u.name, r.name as role_name 
        FROM users u
        JOIN roles r ON u.role_id = r.id
        WHERE u.tg_id = ?
    """, (message.from_user.id,))
    
    result = cursor.fetchone()
    conn.close()

    if result:
        user_name = result["name"]
        role_name = result["role_name"].lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        welcome_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!"

        reply_markup = None  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if role_name == '–ø—Å–∏—Ö–æ–ª–æ–≥':
            reply_markup = psychologist_panel
        elif role_name == '–¥–µ–∫–∞–Ω':
            reply_markup = get_dekan_menu()
        elif message.from_user.id in ADMIN_ID:
            reply_markup = admin_menu

        await message.answer(welcome_message, reply_markup=reply_markup)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")


# –ö–æ–º–∞–Ω–¥–∞ /psychologist –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ ]

@dp.message(Command("psychologist"))
async def open_psychologist_panel(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT r.name as role_name 
        FROM users u 
        JOIN roles r ON u.role_id = r.id 
        WHERE u.tg_id = ?
    """, (message.from_user.id,))
    user_role = cursor.fetchone()
    conn.close()

    if user_role and user_role[0].lower() == '–ø—Å–∏—Ö–æ–ª–æ–≥':
        await message.answer("–ü–∞–Ω–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞", reply_markup=psychologist_panel)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.")

@dp.message(Command("dekan"))
async def open_dekan_panel(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT r.name as role_name 
        FROM users u 
        JOIN roles r ON u.role_id = r.id 
        WHERE u.tg_id = ?
    """, (message.from_user.id,))
    result = cursor.fetchone()
    conn.close()

    if result and result[0].lower() == "–¥–µ–∫–∞–Ω":
        await message.answer("–ü–∞–Ω–µ–ª—å –¥–µ–∫–∞–Ω–∞", reply_markup=get_dekan_menu())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –¥–µ–∫–∞–Ω–∞.")

        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
@dp.callback_query(lambda call: call.data == "manage_roles")
async def start_role_assignment(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_ID:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å:")
    await state.set_state(RoleAssignment.waiting_for_tg_id)
    await call.answer()

@dp.message(RoleAssignment.waiting_for_tg_id)
async def process_tg_id(message: types.Message, state: FSMContext):
    try:
        tg_id = int(message.text)
        await state.update_data(tg_id=tg_id)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Row
    cursor = conn.cursor()

    cursor.execute("SELECT name FROM roles WHERE name IN ('–¥–µ–∫–∞–Ω', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–∑–∞–º –¥–µ–∫–∞–Ω', '–∑–∞–≤ –∫–∞—Ñ', '–ø—Å–∏—Ö–æ–ª–æ–≥')")
    roles = cursor.fetchall()
    conn.close()

    if not roles:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–∏—Å—Ç–µ–º—É.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=role["name"], callback_data=f"select_role_{role['name']}")] for role in roles]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=keyboard)
    await state.set_state(RoleAssignment.waiting_for_role)

@dp.callback_query(lambda call: call.data.startswith("select_role_"))
async def process_role(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    tg_id = user_data["tg_id"]
    new_role = call.data.split("_")[-1].lower()
    
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM roles WHERE name = ?", (new_role,))
    role = cursor.fetchone()

    if not role:
        await call.message.answer("–¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ.")
        conn.close()
        return

    role_id = role["id"]
    cursor.execute("UPDATE users SET role_id = ? WHERE tg_id = ?", (role_id, tg_id))
    conn.commit()
    cursor.execute("INSERT INTO admin_logs (tg_id, action, details) VALUES (?, ?, ?)", 
                   (call.from_user.id, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏", f"{tg_id} ‚Üí {new_role}"))
    conn.commit()
    conn.close()

    await call.message.answer(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {tg_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.", reply_markup=admin_menu)
    await state.clear()
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda call: call.data == "add_user")
async def add_user_handler(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_ID:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AddUser.waiting_for_tg_id)
    await call.answer()

@dp.message(AddUser.waiting_for_tg_id)
async def process_new_user_tg_id(message: types.Message, state: FSMContext):
    try:
        new_tg_id = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(new_tg_id=new_tg_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AddUser.waiting_for_name)

@dp.message(AddUser.waiting_for_name)
async def process_new_user_name(message: types.Message, state: FSMContext):
    new_name = message.text
    await state.update_data(new_name=new_name)
    allowed_roles = ["–¥–µ–∫–∞–Ω", "–∑–∞–≤ –∫–∞—Ñ", "–ø—Å–∏—Ö–æ–ª–æ–≥"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=role.capitalize(), callback_data=f"add_role_{role}")] for role in allowed_roles
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await state.set_state(AddUser.waiting_for_role)

@dp.callback_query(lambda call: call.data.startswith("add_role_"))
async def process_new_user_role(call: types.CallbackQuery, state: FSMContext):
    new_role = call.data.split("add_role_")[-1].lower()
    data = await state.get_data()
    new_tg_id = data.get("new_tg_id")
    new_name = data.get("new_name")
    
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM roles WHERE name = ?", (new_role,))
    role = cursor.fetchone()

    if not role:
        await call.message.answer("–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ.")
        conn.close()
        await state.clear()
        return

    role_id = role["id"]
    try:
        cursor.execute("INSERT INTO users (tg_id, name, group_name, role_id) VALUES (?, ?, ?, ?)",
                       (new_tg_id, new_name, None, role_id))
        conn.commit()
        cursor.execute("INSERT INTO admin_logs (tg_id, action, details) VALUES (?, ?, ?)",
                       (call.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"{new_tg_id} - {new_name}, —Ä–æ–ª—å: {new_role}"))
        conn.commit()
        await call.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_name} —Å Telegram ID {new_tg_id} –∏ —Ä–æ–ª—å—é {new_role} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_menu)
    except sqlite3.IntegrityError:
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=admin_menu)

    conn.close()
    await state.clear()
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda call: call.data == "remove_user")
async def remove_user_handler(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_ID:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(RemoveUser.waiting_for_tg_id)
    await call.answer()

@dp.message(RemoveUser.waiting_for_tg_id)
async def process_remove_user(message: types.Message, state: FSMContext):
    try:
        tg_id = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("SELECT name FROM users WHERE tg_id = ?", (tg_id,))
    user = cursor.fetchone()

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_menu)
        conn.close()
        await state.clear()
        return

    cursor.execute("DELETE FROM users WHERE tg_id = ?", (tg_id,))
    conn.commit()
    cursor.execute("INSERT INTO admin_logs (tg_id, action, details) VALUES (?, ?, ?)",
                   (message.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {tg_id}"))
    conn.commit()
    conn.close()

    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {tg_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=admin_menu)
    await state.clear()

@dp.callback_query(lambda call: call.data == "contacts")
async def contacts_handler(call: types.CallbackQuery):
    await call.message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: [–ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤]")
    await call.answer()

@dp.callback_query(lambda call: call.data == "student_telegrams")
async def telegrams_handler(call: types.CallbackQuery):
    await call.message.answer("–°–ø–∏—Å–æ–∫ Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: [–ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö]")
    await call.answer()


# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ===
@dp.callback_query(lambda call: call.data == "create_event")
async def create_event_prompt(call: types.CallbackQuery):
    event_steps[call.from_user.id] = {"action": "create_event_name"}
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await call.answer()


@dp.message()  # –û–¥–∏–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
async def handle_event_creation(message: types.Message):
    user_id = message.from_user.id
    if user_id in event_steps:
        step = event_steps[user_id]
        
        if step["action"] == "create_event_name":
            step["name"] = message.text
            step["action"] = "create_event_date"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        
        elif step["action"] == "create_event_date":
            try:
                event_time = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
                step["date"] = event_time.strftime("%Y-%m-%d %H:%M:%S")
                step["action"] = "create_event_limit"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            except ValueError:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.")
        
        elif step["action"] == "create_event_limit":
            try:
                step["limit"] = int(message.text)
                step["action"] = "create_event_description"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            except ValueError:
                await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        
        elif step["action"] == "create_event_description":
            step["description"] = message.text

            # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –∞ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
            conn = get_db_connection()
            cursor = conn.cursor()
            try:
                cursor.execute("""
                    INSERT INTO events (event_name, description, event_date, participant_limit, tg_id)
                    VALUES (?, ?, ?, ?, ?)
                """, (step["name"], step["description"], step["date"], step["limit"], user_id))
                conn.commit()  # –í–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å commit –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º lastrowid
                event_id = cursor.lastrowid
                if not event_id:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
                
                logging.info(f"–°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID: {event_id}")
            except sqlite3.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            participate_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{event_id}")]]
            )

            # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            conn = get_db_connection()
            users = conn.execute("SELECT tg_id FROM users").fetchall()
            conn.close()
            
            for user in users:
                try:
                    await bot.send_message(
                        user[0],
                        f"üì¢ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n<b>{step['name']}</b>\n"
                        f"üìÖ –î–∞—Ç–∞: {step['date']}\n"
                        f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {step['limit']}\n"
                        f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {step['description']}",
                        parse_mode="HTML", reply_markup=participate_keyboard
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            scheduler.add_job(close_event_registration, "date",
                              run_date=datetime.strptime(step["date"], "%Y-%m-%d %H:%M:%S"),
                              args=[event_id])

            await message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            del event_steps[user_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
@dp.callback_query(F.data.startswith("join_"))
async def join_event(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    cursor.execute("SELECT participant_limit FROM events WHERE id = ?", (event_id,))
    limit_row = cursor.fetchone()
    
    if not limit_row:
        await callback_query.answer("–û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        conn.close()
        return
    
    limit = limit_row[0]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT name, group_name FROM users WHERE tg_id = ?", (user_id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await callback_query.answer("–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!", show_alert=True)
        conn.close()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    cursor.execute("SELECT COUNT(*) FROM event_participants WHERE event_id = ? AND tg_id = ?", (event_id, user_id))
    if cursor.fetchone()[0] > 0:
        await callback_query.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!", show_alert=True)
        conn.close()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    cursor.execute("SELECT COUNT(*) FROM event_participants WHERE event_id = ?", (event_id,))
    current_count = cursor.fetchone()[0]

    if current_count >= limit:
        await callback_query.answer("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
        conn.close()
        return

    name, group_name = user_data

    try:
        cursor.execute("""
            INSERT INTO event_participants (event_id, tg_id, name, group_name)
            VALUES (?, ?, ?, ?)
        """, (event_id, user_id, name, group_name))
        conn.commit()
        await callback_query.message.answer(f"‚úÖ {callback_query.from_user.full_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏", show_alert=True)
    finally:
        conn.close()



# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ===
async def close_event_registration(event_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT tg_id FROM users")
    users = cursor.fetchall()
    conn.close()
    for user in users:
        try:
            # –ï—Å–ª–∏ fetchall() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂, –∏—Å–ø–æ–ª—å–∑—É–µ–º user[0]
            await bot.send_message(user[0], "‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")












 

async def export_to_excel(chat_id: int, data_type: str):
    try:
        logging.info(f"–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞: {data_type}")
        wb = Workbook()
        ws = wb.active
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        if data_type == 'events':
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            cursor.execute("""
                SELECT DISTINCT e.id, e.event_name, e.event_date
                FROM events e
                ORDER BY e.event_date DESC
            """)
            events = cursor.fetchall()

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            result_data = []
            max_participants = 0
            
            for event in events:
                event_id, event_name, event_date = event
                cursor.execute("""
                    SELECT ep.name
                    FROM event_participants ep
                    WHERE ep.event_id = ?
                    ORDER BY ep.name
                """, (event_id,))
                participants = cursor.fetchall()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                max_participants = max(max_participants, len(participants))
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                participant_names = [p[0] for p in participants]
                # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
                participant_names.extend([''] * (max_participants - len(participant_names)))
                
                result_data.append([event_name, event_date] + participant_names)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–î–∞—Ç–∞']
            for i in range(max_participants):
                headers.append(f'–£—á–∞—Å—Ç–Ω–∏–∫ {i+1}')
            
            ws.append(headers)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for row in result_data:
                ws.append([str(cell) if cell is not None else '' for cell in row])

        else:  # –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            queries = {
                'users': {
                    'title': "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    'headers': ['ID', 'Telegram ID', '–ò–º—è', '–ì—Ä—É–ø–ø–∞', '–†–æ–ª—å'],
                    'query': """
                        SELECT u.id, u.tg_id, u.name, u.group_name, r.name as role_name
                        FROM users u
                        LEFT JOIN roles r ON u.role_id = r.id
                        ORDER BY u.id
                    """
                }
            }
            
            query_data = queries[data_type]
            ws.title = query_data['title']
            ws.append(query_data['headers'])
            
            cursor.execute(query_data['query'])
            rows = cursor.fetchall()
            
            for row in rows:
                row_data = [str(value) if value is not None else '' for value in row]
                ws.append(row_data)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in ws.columns:
            max_length = 0
            column = list(column)
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width

        filename = f"{data_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)

        with open(filename, 'rb') as file:
            await bot.send_document(
                chat_id,
                BufferedInputFile(file.read(), filename=filename),
                caption=f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: {data_type.capitalize()}"
            )

        os.remove(filename)
        conn.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@dp.callback_query(lambda call: call.data.startswith("export_"))
async def handle_export(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç: {call.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT r.name as role_name 
            FROM users u 
            JOIN roles r ON u.role_id = r.id 
            WHERE u.tg_id = ?
        """, (call.from_user.id,))
        result = cursor.fetchone()
        conn.close()

        if not result or result[0].lower() != "–¥–µ–∫–∞–Ω":
            await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return

        await call.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...")
        data_type = call.data.replace("export_", "")
        await export_to_excel(call.message.chat.id, data_type)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", exc_info=True)
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot.log'),
            logging.StreamHandler()
        ]
    )
    
    setup_database()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
    Executor.start_polling(dp)